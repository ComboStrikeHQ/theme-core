// scss-lint:disable PseudoElement QualifyingElement SelectorFormat

.form-group,
.input-group {
  position: relative; // fix for absolutely positioned feedback
  flex-wrap: wrap; // prevent feedback-text squashed next to input

  .form-text {
    width: 100%; // prevent feedback-text squashed next to input
  }
}

// form-control
%form-control-disabled {
  &,
  &:focus {
    background-color: $input-disabled-bg;
    border-color: $input-border-color;
    border-style: solid;
    color: $input-color;
    opacity: $btn-disabled-opacity;
    pointer-events: none;
  }
}

%form-control-focus {
  background-color: $input-focus-bg;
  border-color: $input-focus-border-color;
  box-shadow: $input-btn-focus-box-shadow;
  color: $input-focus-color;
  outline: none;
}

%invalid-control {
  border-color: $form-feedback-invalid-color;

  &:focus,
  .is-open & {
    border-color: $form-feedback-invalid-color;
    box-shadow: 0 0 0 $input-focus-width rgba($form-feedback-invalid-color, .25);
  }
}

%form-control {
  background-clip: border-box;
  transition: $btn-transition;

  + .input-group-append .btn-outline-secondary {
    border-color: $input-border-color;

    &:not(:disabled):not(.disabled):not([readonly]):not(.readonly) {
      &:hover,
      &:focus,
      &:active {
        border-color: transparent;
      }
    }
  }

  &:not(:disabled):not(.disabled):not([readonly]):not(.readonly) {
    background-color: $input-bg;
    border-color: $input-border-color;

    &:hover,
    &:focus,
    &:active,
    &.focus,
    &.active {
      background-color: $input-focus-bg;
    }

    &:hover:active:focus,
    &.active:focus,
    &:active:focus,
    &:active,
    &:focus,
    &.focus,
    &.active {
      @extend %form-control-focus;
    }

    .is-invalid &,
    &.is-invalid {
      @extend %invalid-control;
    }
  }

  &:disabled,
  &.disabled {
    @extend %form-control-disabled;

    + .input-group-append .btn {
      @extend %form-control-disabled;
    }
  }

  &[readonly],
  &.readonly {
    background-color: transparent;
    border-color: rgba($input-border-color, $btn-disabled-opacity);
  }
}

.form-control {
  @extend %form-control;
}

.btn-input,
.input-group-text {
  &:not(:disabled):not(.disabled):not([readonly]):not(.readonly) {
    .is-invalid &,
    &.is-invalid {
      @extend %invalid-control;
    }
  }
}

// button-styled checkboxes (toggle-buttons)

%btn-toggle {
  &::before {
    content: '\f204';
    font-family: 'Font Awesome 5 Free';
    font-size: $font-size-sm;
    font-weight: 900;
    margin-right: $spacer / 3;
  }

  &.active::before {
    content: '\f205';
  }

  > input[type='checkbox'] {
    clip: rect(0, 0, 0, 0);
    pointer-events: none;
    position: absolute;
  }
}

.btn-toggle,
.btn-group-toggle label.btn,
label.btn[class*='checkbox'] {
  @extend %btn-toggle;
}

.btn-group-toggle .form-check {
  padding-left: 0;
}

// misc

textarea {
  min-height: 6em;
}

input[type=number] {
  -moz-appearance: textfield;

  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
}

.date-field {
  position: relative;
}

.form-text {
  @extend .small;
  font-style: italic;
}

// utilities

.textarea--full-height {
  flex-grow: 1;

  textarea {
    height: 100%;
  }
}

// errors, validation

%form-feedback {
  float: right;
  font-family: $font-family-base;
  font-size: .8em;
  font-style: italic;
  margin: 0 ($spacer / 2);
  padding: ($spacer / 5) ($spacer / 2);
  width: auto;

  .is-invalid &,
  &.invalid-feedback {
    color: $danger;
  }

  // avoid help/error text pushing up fields that are aligned to the bottom
  .align-items-end & {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    position: absolute;
    right: 0;
  }
}

.form-control-feedback {
  @extend %form-feedback;
}

// fixes / hacks

// hide auto-fill icon on safari
// https://github.com/brigade/scss-lint/pull/939
input::-webkit-contacts-auto-fill-button {
  opacity: 0;
}

%borderless-controls {
  .btn-input,
  .form-control,
  .input-group-text {
    &:not(:disabled):not(.disabled):not([readonly]):not(.readonly) {
      &,
      &:active,
      &:active:focus,
      &:focus,
      &:hover,
      &:hover:active:focus,
      &.active,
      &.active:focus,
      &.focus {
        border-color: transparent;
      }
    }
  }

  .card {
    @include form-border-color($input-border-color);
  }
}

// removes gray border from inputs when they are on a darker background
@each $color, $value in $theme-colors {
  @if $color != 'light' and $color != 'white' and $color != 'body' {
    .bg-#{$color} {
      @extend %borderless-controls;
    }
  }
}

// fix square edges after label
label + .form-control:not(:first-child) {
  .form-group > &,
  .input-group > & {
    border-bottom-left-radius: $input-border-radius;
    border-top-left-radius: $input-border-radius;
  }

  .input-group-lg > &,
  .form-group-lg > & {
    border-bottom-left-radius: $input-border-radius-lg;
    border-top-left-radius: $input-border-radius-lg;
  }

  .input-group-sm > &,
  .form-group-sm > & {
    border-bottom-left-radius: $input-border-radius-sm;
    border-top-left-radius: $input-border-radius-sm;
  }
}
